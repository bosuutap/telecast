[
    {
        "label": "shelve",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shelve",
        "description": "shelve",
        "detail": "shelve",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "pyrogram",
        "description": "pyrogram",
        "isExtraImport": true,
        "detail": "pyrogram",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "pyrogram",
        "description": "pyrogram",
        "isExtraImport": true,
        "detail": "pyrogram",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "pyrogram",
        "description": "pyrogram",
        "isExtraImport": true,
        "detail": "pyrogram",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "pyrogram",
        "description": "pyrogram",
        "isExtraImport": true,
        "detail": "pyrogram",
        "documentation": {}
    },
    {
        "label": "idle",
        "importPath": "pyrogram",
        "description": "pyrogram",
        "isExtraImport": true,
        "detail": "pyrogram",
        "documentation": {}
    },
    {
        "label": "ChatAction",
        "importPath": "pyrogram.enums",
        "description": "pyrogram.enums",
        "isExtraImport": true,
        "detail": "pyrogram.enums",
        "documentation": {}
    },
    {
        "label": "Telecast",
        "importPath": "telecast",
        "description": "telecast",
        "isExtraImport": true,
        "detail": "telecast",
        "documentation": {}
    },
    {
        "label": "ytsearch",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "getlive",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "get_audio",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "get_video",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "PyTgCalls",
        "importPath": "pytgcalls",
        "description": "pytgcalls",
        "isExtraImport": true,
        "detail": "pytgcalls",
        "documentation": {}
    },
    {
        "label": "MediaStream",
        "importPath": "pytgcalls.types",
        "description": "pytgcalls.types",
        "isExtraImport": true,
        "detail": "pytgcalls.types",
        "documentation": {}
    },
    {
        "label": "AudioQuality",
        "importPath": "pytgcalls.types",
        "description": "pytgcalls.types",
        "isExtraImport": true,
        "detail": "pytgcalls.types",
        "documentation": {}
    },
    {
        "label": "VideoQuality",
        "importPath": "pytgcalls.types",
        "description": "pytgcalls.types",
        "isExtraImport": true,
        "detail": "pytgcalls.types",
        "documentation": {}
    },
    {
        "label": "GroupCallConfig",
        "importPath": "pytgcalls.types",
        "description": "pytgcalls.types",
        "isExtraImport": true,
        "detail": "pytgcalls.types",
        "documentation": {}
    },
    {
        "label": "MediaDevices",
        "importPath": "pytgcalls.media_devices",
        "description": "pytgcalls.media_devices",
        "isExtraImport": true,
        "detail": "pytgcalls.media_devices",
        "documentation": {}
    },
    {
        "label": "SESSION",
        "importPath": "env",
        "description": "env",
        "isExtraImport": true,
        "detail": "env",
        "documentation": {}
    },
    {
        "label": "BOT_TOKEN",
        "importPath": "env",
        "description": "env",
        "isExtraImport": true,
        "detail": "env",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "unquote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "yt_dlp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yt_dlp",
        "description": "yt_dlp",
        "detail": "yt_dlp",
        "documentation": {}
    },
    {
        "label": "VideosSearch",
        "importPath": "youtubesearchpython",
        "description": "youtubesearchpython",
        "isExtraImport": true,
        "detail": "youtubesearchpython",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "response",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "start_telecast",
        "importPath": "telecast.client",
        "description": "telecast.client",
        "isExtraImport": true,
        "detail": "telecast.client",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "on_channel",
        "kind": 2,
        "importPath": "plugins.streams",
        "description": "plugins.streams",
        "peekOfCode": "def on_channel(_, __, m):\n    return (\n        m.from_user.id in owner if m.from_user else (m.sender_chat.id == -1001559828576)\n    )\ndef filter_len(_, __, m):\n    return len(m.command) > 1\n@Client.on_message(filters.command(\"join\"))\ndef join_chat(c, m):\n    m.reply_chat_action(ChatAction.TYPING)\n    chat = m.chat.id",
        "detail": "plugins.streams",
        "documentation": {}
    },
    {
        "label": "filter_len",
        "kind": 2,
        "importPath": "plugins.streams",
        "description": "plugins.streams",
        "peekOfCode": "def filter_len(_, __, m):\n    return len(m.command) > 1\n@Client.on_message(filters.command(\"join\"))\ndef join_chat(c, m):\n    m.reply_chat_action(ChatAction.TYPING)\n    chat = m.chat.id\n    if chat in owner:\n        chat = -1001559828576\n    status = streamer.join(chat)\n    if status:",
        "detail": "plugins.streams",
        "documentation": {}
    },
    {
        "label": "join_chat",
        "kind": 2,
        "importPath": "plugins.streams",
        "description": "plugins.streams",
        "peekOfCode": "def join_chat(c, m):\n    m.reply_chat_action(ChatAction.TYPING)\n    chat = m.chat.id\n    if chat in owner:\n        chat = -1001559828576\n    status = streamer.join(chat)\n    if status:\n        m.reply(\"**Chương trình đã bắt đầu**\")\n    else:\n        m.reply(\"**Không thể bắt đầu phát sóng**\", quote=True)",
        "detail": "plugins.streams",
        "documentation": {}
    },
    {
        "label": "leave_chat_call",
        "kind": 2,
        "importPath": "plugins.streams",
        "description": "plugins.streams",
        "peekOfCode": "def leave_chat_call(c, m):\n    m.reply_chat_action(ChatAction.TYPING)\n    chat = m.chat.id\n    if chat in owner:\n        chat = -1001559828576\n    played_time = streamer.played_time(chat)\n    streamer.leave(chat)\n    m.reply(\n        f\"**Chương trình đã kết thúc** ```\\nplayed time: {played_time}```\", quote=True\n    )",
        "detail": "plugins.streams",
        "documentation": {}
    },
    {
        "label": "play_media",
        "kind": 2,
        "importPath": "plugins.streams",
        "description": "plugins.streams",
        "peekOfCode": "def play_media(c, m):\n    m.reply_chat_action(ChatAction.TYPING)\n    chat = m.chat.id\n    if chat in owner:\n        chat = -1001559828576\n    if len(m.command) == 1:\n        m.reply(\"Vui lòng cung cấp link hoặc nội dung để phát\", quote=True)\n    link = m.text.split(m.command[0])[1]\n    if not any(i in link for i in [\"https://\", \"http://\"]):\n        link = ytsearch(link)",
        "detail": "plugins.streams",
        "documentation": {}
    },
    {
        "label": "play_music",
        "kind": 2,
        "importPath": "plugins.streams",
        "description": "plugins.streams",
        "peekOfCode": "def play_music(c, m):\n    m.reply_chat_action(ChatAction.TYPING)\n    chat = m.chat.id\n    if chat in owner:\n        chat = -1001559828576\n    link = m.text.split(m.command[0])[1]\n    if not any(i in link for i in [\"https://\", \"http://\"]):\n        link = ytsearch(link)\n    else:\n        link = [part for part in m.command if part.startswith(\"http\")][0]",
        "detail": "plugins.streams",
        "documentation": {}
    },
    {
        "label": "screen_record",
        "kind": 2,
        "importPath": "plugins.streams",
        "description": "plugins.streams",
        "peekOfCode": "def screen_record(c, m):\n    m.reply_chat_action(ChatAction.TYPING)\n    chat = m.chat.id\n    if chat in owner:\n        chat = -1001559828576\n    status = streamer.screen(chat)\n    if status:\n        m.reply(\"Bắt đầu ghi màn hình\", quote=True)\n    else:\n        m.reply(\"Máy chủ không có màn hình\", quote=True)",
        "detail": "plugins.streams",
        "documentation": {}
    },
    {
        "label": "pause_cast",
        "kind": 2,
        "importPath": "plugins.streams",
        "description": "plugins.streams",
        "peekOfCode": "def pause_cast(c, m):\n    m.reply_chat_action(ChatAction.TYPING)\n    chat = m.chat.id\n    if chat in owner:\n        chat = -1001559828576\n    if not kv.get(str(chat)) or kv[str(chat)][0] != \"paused\":\n        st = m.reply(\"Đang tạm dừng\", quote=True)\n        kv[str(chat)] = [\"paused\", st.id]\n@Client.on_message(filters.command(\"resume\"))\ndef resume_cast(c, m):",
        "detail": "plugins.streams",
        "documentation": {}
    },
    {
        "label": "resume_cast",
        "kind": 2,
        "importPath": "plugins.streams",
        "description": "plugins.streams",
        "peekOfCode": "def resume_cast(c, m):\n    m.reply_chat_action(ChatAction.TYPING)\n    chat = m.chat.id\n    if chat in owner:\n        chat = -1001559828576\n    if kv.get(str(chat)) and kv[str(chat)][0] == \"paused\":\n        streamer.resume(chat)\n        mid = kv[str(chat)][1]\n        c.delete_messages(m.chat.id, int(mid))\n        kv[str(chat)] = [\"playing\", mid]",
        "detail": "plugins.streams",
        "documentation": {}
    },
    {
        "label": "streamer",
        "kind": 5,
        "importPath": "plugins.streams",
        "description": "plugins.streams",
        "peekOfCode": "streamer = Telecast()\nowner = [5665225938, 7317791383]\nkv = shelve.open(\"streamer.status\")\ndef on_channel(_, __, m):\n    return (\n        m.from_user.id in owner if m.from_user else (m.sender_chat.id == -1001559828576)\n    )\ndef filter_len(_, __, m):\n    return len(m.command) > 1\n@Client.on_message(filters.command(\"join\"))",
        "detail": "plugins.streams",
        "documentation": {}
    },
    {
        "label": "owner",
        "kind": 5,
        "importPath": "plugins.streams",
        "description": "plugins.streams",
        "peekOfCode": "owner = [5665225938, 7317791383]\nkv = shelve.open(\"streamer.status\")\ndef on_channel(_, __, m):\n    return (\n        m.from_user.id in owner if m.from_user else (m.sender_chat.id == -1001559828576)\n    )\ndef filter_len(_, __, m):\n    return len(m.command) > 1\n@Client.on_message(filters.command(\"join\"))\ndef join_chat(c, m):",
        "detail": "plugins.streams",
        "documentation": {}
    },
    {
        "label": "kv",
        "kind": 5,
        "importPath": "plugins.streams",
        "description": "plugins.streams",
        "peekOfCode": "kv = shelve.open(\"streamer.status\")\ndef on_channel(_, __, m):\n    return (\n        m.from_user.id in owner if m.from_user else (m.sender_chat.id == -1001559828576)\n    )\ndef filter_len(_, __, m):\n    return len(m.command) > 1\n@Client.on_message(filters.command(\"join\"))\ndef join_chat(c, m):\n    m.reply_chat_action(ChatAction.TYPING)",
        "detail": "plugins.streams",
        "documentation": {}
    },
    {
        "label": "Telecast",
        "kind": 6,
        "importPath": "telecast.client",
        "description": "telecast.client",
        "peekOfCode": "class Telecast:\n    def __init__(self):\n        self.config = call_config\n        self.app = telecast_app\n    def stream(self, media):\n        return MediaStream(media, AudioQuality.STUDIO, VideoQuality.FHD_1080p)\n    def join(self, chat):\n        try:\n            self.app.play(chat, config=self.config)\n            return True",
        "detail": "telecast.client",
        "documentation": {}
    },
    {
        "label": "start_telecast",
        "kind": 2,
        "importPath": "telecast.client",
        "description": "telecast.client",
        "peekOfCode": "def start_telecast(bot):\n    return telecast_app.start()\nclass Telecast:\n    def __init__(self):\n        self.config = call_config\n        self.app = telecast_app\n    def stream(self, media):\n        return MediaStream(media, AudioQuality.STUDIO, VideoQuality.FHD_1080p)\n    def join(self, chat):\n        try:",
        "detail": "telecast.client",
        "documentation": {}
    },
    {
        "label": "client_app",
        "kind": 5,
        "importPath": "telecast.client",
        "description": "telecast.client",
        "peekOfCode": "client_app = Client(\"telecast\", session_string=SESSION, device_model=\"Telecast\")\ntelecast_app = PyTgCalls(client_app)\nwith client_app as c:\n    channel_peer = c.resolve_peer(\"contentdownload\")\ncall_config = GroupCallConfig(join_as=channel_peer)\ndef start_telecast(bot):\n    return telecast_app.start()\nclass Telecast:\n    def __init__(self):\n        self.config = call_config",
        "detail": "telecast.client",
        "documentation": {}
    },
    {
        "label": "telecast_app",
        "kind": 5,
        "importPath": "telecast.client",
        "description": "telecast.client",
        "peekOfCode": "telecast_app = PyTgCalls(client_app)\nwith client_app as c:\n    channel_peer = c.resolve_peer(\"contentdownload\")\ncall_config = GroupCallConfig(join_as=channel_peer)\ndef start_telecast(bot):\n    return telecast_app.start()\nclass Telecast:\n    def __init__(self):\n        self.config = call_config\n        self.app = telecast_app",
        "detail": "telecast.client",
        "documentation": {}
    },
    {
        "label": "call_config",
        "kind": 5,
        "importPath": "telecast.client",
        "description": "telecast.client",
        "peekOfCode": "call_config = GroupCallConfig(join_as=channel_peer)\ndef start_telecast(bot):\n    return telecast_app.start()\nclass Telecast:\n    def __init__(self):\n        self.config = call_config\n        self.app = telecast_app\n    def stream(self, media):\n        return MediaStream(media, AudioQuality.STUDIO, VideoQuality.FHD_1080p)\n    def join(self, chat):",
        "detail": "telecast.client",
        "documentation": {}
    },
    {
        "label": "getlive",
        "kind": 2,
        "importPath": "util.ttlive",
        "description": "util.ttlive",
        "peekOfCode": "def getlive(url):\n    try:\n        response = requests.get(\n            url,\n            stream=True,\n            headers={\n                \"user-agent\": \"Mozilla/5.0 (Linux; Android 12) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.98 Mobile Safari/537.36\"\n            },\n            timeout=100,\n        )",
        "detail": "util.ttlive",
        "documentation": {}
    },
    {
        "label": "Result",
        "kind": 6,
        "importPath": "util.yt",
        "description": "util.yt",
        "peekOfCode": "class Result(BaseModel):\n    title: str\n    url: str\ndef get_thumbnail(url):\n    req = requests.get(url, timeout=10)\n    img = io.BytesIO(req.content)\n    img.name = \"thumbnail.jpg\"\n    return img\ndef get_video(video_url):\n    ydl_opts = {\"format\": \"best\"}",
        "detail": "util.yt",
        "documentation": {}
    },
    {
        "label": "get_thumbnail",
        "kind": 2,
        "importPath": "util.yt",
        "description": "util.yt",
        "peekOfCode": "def get_thumbnail(url):\n    req = requests.get(url, timeout=10)\n    img = io.BytesIO(req.content)\n    img.name = \"thumbnail.jpg\"\n    return img\ndef get_video(video_url):\n    ydl_opts = {\"format\": \"best\"}\n    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n        info_dict = ydl.extract_info(video_url, download=False)\n        url = info_dict[\"url\"]",
        "detail": "util.yt",
        "documentation": {}
    },
    {
        "label": "get_video",
        "kind": 2,
        "importPath": "util.yt",
        "description": "util.yt",
        "peekOfCode": "def get_video(video_url):\n    ydl_opts = {\"format\": \"best\"}\n    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n        info_dict = ydl.extract_info(video_url, download=False)\n        url = info_dict[\"url\"]\n        title = info_dict[\"fulltitle\"]\n        thumbnail = info_dict[\"thumbnail\"]\n        thumbnail = get_thumbnail(thumbnail)\n        return (\n            Result(",
        "detail": "util.yt",
        "documentation": {}
    },
    {
        "label": "get_audio",
        "kind": 2,
        "importPath": "util.yt",
        "description": "util.yt",
        "peekOfCode": "def get_audio(url):\n    ydl_opts = {\"format\": \"bestaudio/best\"}\n    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n        info_dict = ydl.extract_info(url, download=False)\n        url = info_dict[\"url\"]\n        title = info_dict[\"fulltitle\"]\n        thumbnail = info_dict[\"thumbnail\"]\n        thumbnail = get_thumbnail(thumbnail)\n        return (\n            Result(",
        "detail": "util.yt",
        "documentation": {}
    },
    {
        "label": "ytsearch",
        "kind": 2,
        "importPath": "util.yt",
        "description": "util.yt",
        "peekOfCode": "def ytsearch(query):\n    videosSearch = VideosSearch(query, limit=1)\n    result = videosSearch.result()\n    link = result[\"result\"][0][\"link\"]\n    return link",
        "detail": "util.yt",
        "documentation": {}
    },
    {
        "label": "secret",
        "kind": 5,
        "importPath": "env",
        "description": "env",
        "peekOfCode": "secret = os.getenv(\"SECRET\")\nreq = requests.get(secret, timeout=10)\nresponse = req.json()\nSESSION = response[\"telegram\"][\"session\"]\nBOT_TOKEN = response[\"bot\"][\"tiktokdouyin\"]",
        "detail": "env",
        "documentation": {}
    },
    {
        "label": "req",
        "kind": 5,
        "importPath": "env",
        "description": "env",
        "peekOfCode": "req = requests.get(secret, timeout=10)\nresponse = req.json()\nSESSION = response[\"telegram\"][\"session\"]\nBOT_TOKEN = response[\"bot\"][\"tiktokdouyin\"]",
        "detail": "env",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "env",
        "description": "env",
        "peekOfCode": "response = req.json()\nSESSION = response[\"telegram\"][\"session\"]\nBOT_TOKEN = response[\"bot\"][\"tiktokdouyin\"]",
        "detail": "env",
        "documentation": {}
    },
    {
        "label": "SESSION",
        "kind": 5,
        "importPath": "env",
        "description": "env",
        "peekOfCode": "SESSION = response[\"telegram\"][\"session\"]\nBOT_TOKEN = response[\"bot\"][\"tiktokdouyin\"]",
        "detail": "env",
        "documentation": {}
    },
    {
        "label": "BOT_TOKEN",
        "kind": 5,
        "importPath": "env",
        "description": "env",
        "peekOfCode": "BOT_TOKEN = response[\"bot\"][\"tiktokdouyin\"]",
        "detail": "env",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "bot = Client(\n    \"telecast_manager\",\n    21021245,\n    \"7b32ea92719781c5e22ede319c5dbde5\",\n    bot_token=BOT_TOKEN,\n    plugins=dict(root=\"plugins\"),\n)\nbot.start()\nstart_telecast(bot)\nidle()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_video",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def get_video(video_url):\n    ydl_opts = {\"format\": \"best\"}\n    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n        info_dict = ydl.extract_info(video_url, download=False)\n        return info_dict\nlink = get_video(\"https://youtu.be/92rkN4n-V20?si=AL9oDh98_FS7LNJm\")\nwith open(\"test.json\", \"w\") as f:\n    json.dump(link, f)\nprint(link['thumbnail'])",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "link",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "link = get_video(\"https://youtu.be/92rkN4n-V20?si=AL9oDh98_FS7LNJm\")\nwith open(\"test.json\", \"w\") as f:\n    json.dump(link, f)\nprint(link['thumbnail'])",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "telestream__",
        "kind": 2,
        "importPath": "web",
        "description": "web",
        "peekOfCode": "def telestream__():\n    return \"OK\"",
        "detail": "web",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "web",
        "description": "web",
        "peekOfCode": "app = Flask(\"__telestream__\")\n@app.route(\"/\")\ndef telestream__():\n    return \"OK\"",
        "detail": "web",
        "documentation": {}
    }
]